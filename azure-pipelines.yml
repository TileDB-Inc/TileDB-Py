trigger:
- dev

strategy:
  matrix:
    mac:
      imageName: 'macOS-10.13'
      python.version: '3.x'
    windows:
      imageName: 'vs2017-win2016'
      python.version: '3.x'
    linux_py2:
      imageName: 'ubuntu-16.04'
      python.version: '2.7'
    linux_py3:
      imageName: 'ubuntu-16.04'
      python.version: '3.x'
  maxParallel: 4

pool:
  vmImage: $(imageName)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
    architecture: 'x64'

- script: |
    printenv
  displayName: 'Print env'

- script: |
    python -m pip install --upgrade pip setuptools wheel numpy tox setuptools-scm cython psutil
  displayName: 'Install dependencies'

- script: |
    call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
    python setup.py build_ext --inplace
    python setup.py install
  displayName: 'Build TileDB and TileDB-Py extension (Windows)'
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- script: |
    python setup.py build_ext --inplace
    python setup.py install
  displayName: 'Build TileDB and TileDB-Py extension (POSIX)'
  condition: ne(variables['Agent.OS'], 'Windows_NT')

- bash: |
    python -m unittest tiledb.tests.all.suite_test

    # Test wheel build, install, and run
    python setup.py bdist_wheel
    whl_file=`pwd`/dist/`ls dist`
    pushd /tmp
    echo "Installing wheel file from $whl_file..."
    pip install $whl_file
    python -c "import tiledb ; tiledb.libtiledb.version()"
  displayName: 'Run tests'

- bash: |
    set -e pipefail
    # Display log files if the build failed
    echo "Dumping log files for failed build"
    echo "----------------------------------"
    for f in $(find $BUILD_REPOSITORY_LOCALPATH/build -name *.log);
      do echo "------"
         echo $f
         echo "======"
         cat $f
      done;
  condition: failed() # only run this job if the build step failed
  displayName: "Print log files (failed build only)"
