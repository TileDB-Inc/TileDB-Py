name: TileDB Python CI

on: [push, pull_request, workflow_dispatch]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, macos-11, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
      fail-fast: false
    env:
      # 11.7 necessary due to: https://github.com/actions/setup-python/issues/682#issuecomment-1604261330
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.os == 'macos-11' && contains(fromJSON('["3.7", "3.8"]'), matrix.python-version) && '11.7' || '10.15' }}
      #MACOSX_DEPLOYMENT_TARGET: "10.15"
    steps:
      - name: Checkout TileDB-Py `dev`
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - run: rm -rf $RUNNER_TOOL_CACHE/Python/3.7.17
        if: matrix.os == 'macos-11' && matrix.python-version == '3.7'
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7.17
        if: matrix.os == 'macos-11' && matrix.python-version == '3.7'

      - name: Print Python version
        run: |
          which python
          which pip
          python --version

      - name: Print env
        run: printenv

      - name: Print pip debug info
        run: pip debug --verbose

      # Remove after upstream PR fully-deployed:
      # - https://github.com/actions/runner-images/pull/7125
      - name: "Install homebrew dependencies"
        run: brew install pkg-config
        if: matrix.os == 'macos-11'

      - name: "Install dependencies"
        run: python -m pip install --upgrade -r misc/requirements_ci.txt

      - name: "Get TILEDB_VERSION"
        run: echo "LIBTILEDB_VERSION=$(python setup.py get_tiledb_version | tail -n 1)" >> $GITHUB_ENV

      - name: "Get LIBTILEDB_SHA"
        run: echo "LIBTILEDB_SHA=$(git ls-remote https://github.com/TileDB-Inc/TileDB $LIBTILEDB_VERSION | cut -c1-7)" >> $GITHUB_ENV

      - name: "Download TileDB From Zip And Build TileDB-Py (Windows)"
        run: |
          choco install wget --no-progress

          if wget https://github.com/TileDB-Inc/TileDB/releases/download/$LIBTILEDB_VERSION/tiledb-windows-x86_64-$LIBTILEDB_VERSION-$LIBTILEDB_SHA.zip; then
            unzip tiledb-windows-x86_64-$LIBTILEDB_VERSION-$LIBTILEDB_SHA.zip -d /usr/local
            cp /usr/local/bin/tiledb.dll tiledb
            python setup.py develop --tiledb=/usr/local
          else 
            # Build from source as fallback
            python setup.py build_ext --inplace
            python setup.py develop
          fi
        env:
          TILEDB_FORCE_ALL_DEPS: True
        if: matrix.os == 'windows-latest'

      - name: "Download TileDB From Tarball And Build TileDB-Py (macOS)"
        run: |
          set -xeo pipefail

          if wget https://github.com/TileDB-Inc/TileDB/releases/download/$LIBTILEDB_VERSION/tiledb-macos-x86_64-$LIBTILEDB_VERSION-$LIBTILEDB_SHA.tar.gz; then
            sudo tar -vzxf tiledb-macos-x86_64-$LIBTILEDB_VERSION-$LIBTILEDB_SHA.tar.gz -C /usr/local
            python setup.py develop --tiledb=/usr/local
          else 
            # Build from source as fallback
            python setup.py build_ext --inplace
            python setup.py develop
          fi
        if: matrix.os == 'macos-11'

      - name: "Download TileDB From Tarball And Build TileDB-Py (Linux)"
        run: |
          set -xeo pipefail

          if wget https://github.com/TileDB-Inc/TileDB/releases/download/$LIBTILEDB_VERSION/tiledb-linux-x86_64-$LIBTILEDB_VERSION-$LIBTILEDB_SHA.tar.gz; then
            sudo tar -vzxf tiledb-linux-x86_64-$LIBTILEDB_VERSION-$LIBTILEDB_SHA.tar.gz -C /usr/local
            python setup.py develop --tiledb=/usr/local
          else 
            # Build from source as fallback
            python setup.py build_ext --inplace
            python setup.py develop
          fi
        if: matrix.os == 'ubuntu-latest'

      - name: "Check build directory"
        run: ls -Rl

      - name: "Run tests"
        run: pytest -vv --showlocals

      - name: "Print log files (failed build only)"
        run: |
          set -xeo pipefail
          # Display log files if the build failed
          echo 'Dumping log files for failed build'
          echo '----------------------------------'
          for f in $(find build -name *.log);
            do echo '------'
               echo $f
               echo '======'
               cat $f
            done;
        if: failure()
