name: TileDB Python CI

on: [push, pull_request]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        os: [ubuntu-latest, macos-11, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
      fail-fast: false
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.15"
    steps:
      - name: Checkout TileDB-Py `dev`
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print Python version
        run: |
          which python
          which pip
          python --version

      - name: Print env
        run: printenv

      - name: Print pip debug info
        run: pip debug --verbose

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade -r misc/requirements_ci.txt

      - name: "Check build directory"
        run: |
            ls -Rl

      - name: "Build TileDB and TileDB-Py extension (Windows)"
        run: |
          python setup.py build_ext --inplace
          python setup.py install
        if: matrix.os == 'windows-latest'

      - name: "Build TileDB and TileDB-Py extension (POSIX)"
        run: |
          set -xeo pipefail
          python setup.py build_ext --inplace --werror
          python setup.py install
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-11'

      - name: "Run tests"
        run: |
          set -xeo pipefail

          pytest -vv --showlocals

          # Test wheel build, install, and run
          python setup.py bdist_wheel
          mkdir /tmp/wheel_test
          cp dist/*.whl /tmp/wheel_test
          pushd /tmp/wheel_test
          ls
          python -m pip install *.whl
          python -c 'import tiledb ; tiledb.libtiledb.version()'

      - name: "Print log files (failed build only)"
        run: |
          set -xeo pipefail
          # Display log files if the build failed
          echo 'Dumping log files for failed build'
          echo '----------------------------------'
          for f in $(find $BUILD_REPOSITORY_LOCALPATH/build -name *.log);
            do echo '------'
               echo $f
               echo '======'
               cat $f
            done;
        if: ${{ failure() }}
