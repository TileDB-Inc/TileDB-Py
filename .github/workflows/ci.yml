name: TileDB Python CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-10.15, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.14
    steps:
    - name: Checkout TileDB-Py `dev`
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    # Print python and pip version information for debugging.
    - name: 'Print python version in bash task'
      run: |
        echo '==== Python information ===='
        which python
        which pip
        python --version
        echo '============================'
      shell: bash

    - name: 'Print env'
      run: printenv
      shell: bash

    - name: 'Install dependencies'
      run: python -m pip install --upgrade -r misc/requirements_ci.txt
      shell: bash

    - name: 'Build TileDB and TileDB-Py extension (Windows)'
      run: |
        python setup.py build_ext --inplace
        python setup.py install
      shell: bash
      if: matrix.os == 'windows-latest'

    - name: 'Build TileDB and TileDB-Py extension (POSIX)'
      run: |
        set -xeo pipefail
        python setup.py build_ext --inplace --werror
        python setup.py install
      shell: bash
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-10.15'

    - name: 'Run tests'
      run: |
        set -xeo pipefail

        pytest -vv --showlocals

        # Test wheel build, install, and run
        python setup.py bdist_wheel
        #whl_file=`pwd`/dist/`ls dist/*.whl`
        mkdir /tmp/wheel_test
        cp dist/*.whl /tmp/wheel_test
        pushd /tmp/wheel_test
        ls
        pip install *.whl
        python -c 'import tiledb ; tiledb.libtiledb.version()'
      shell: bash

    - name: 'Print log files (failed build only)'
      run: |
        set -xeo pipefail
        # Display log files if the build failed
        echo 'Dumping log files for failed build'
        echo '----------------------------------'
        for f in $(find $BUILD_REPOSITORY_LOCALPATH/build -name *.log);
          do echo '------'
             echo $f
             echo '======'
             cat $f
          done;
      shell: bash
      if: ${{ failure() }} # only run this job if the build step failed
