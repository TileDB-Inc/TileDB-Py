steps:
  - task: Cache@2
    inputs:
      key: 'libtiledb v0 | "$(Agent.OS)" | "$(imageName)" | "$(LIBTILEDB_SHA)" | setup.py | **/azure-*.yml, !tiledb_src/**, !tiledb_build/**'
      path: $(Pipeline.Workspace)/.libtiledb_dist/$(LIBTILEDB_SHA)
      cacheHitVar: LIBTILEDB_CACHE_RESTORED

  - bash: |
      find $PIPELINE_WORKSPACE/.libtiledb_dist/${LIBTILEDB_SHA}
    condition: eq(variables.LIBTILEDB_CACHE_RESTORED, 'true')
    displayName: "Print files restored from cache"

  - bash: |
      brew install pkg-config
    displayName: "Homebrew setup"
    condition: eq(variables['Agent.OS'], 'Darwin')

  - bash: |
      set -xe pipefail
      unset SYSTEM

      git clone ${LIBTILEDB_REPO} $TILEDB_SRC
      git -C $(TILEDB_SRC) checkout $(LIBTILEDB_SHA)

      mkdir -p $TILEDB_BUILD
      cd $TILEDB_BUILD

      # note: CMAKE_OSX_ARCHITECTURES is ignored on non-macOS platforms
      cmake -B $TILEDB_BUILD -S $TILEDB_SRC/ -DTILEDB_FORCE_ALL_DEPS=ON -DTILEDB_WERROR=OFF -DTILEDB_GCS=${TILEDB_GCS} -DTILEDB_S3=ON -DTILEDB_AZURE=ON -DCOMPILER_SUPPORTS_AVX2=FALSE -DTILEDB_TESTS=OFF -DTILEDB_STATIC=ON -DCMAKE_INSTALL_PREFIX=$TILEDB_INSTALL -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES}

      cmake --build $TILEDB_BUILD --config Release -j3
      cmake --build $TILEDB_BUILD --target install-tiledb --config Release

      if [[ "$AGENT_OS" == "Darwin" ]]; then
        cp $TILEDB_BUILD/externals/install/lib/libz.1.dylib $TILEDB_INSTALL/lib || true
      fi

      if [[ "$AGENT_OS" == "Darwin" ]]; then
        otool -L ${TILEDB_INSTALL}/lib/libtiledb.dylib;
      fi
    condition: and(ne(variables['Agent.OS'], 'Windows_NT'), ne(variables.LIBTILEDB_CACHE_RESTORED, 'true'))
    displayName: "Bld libtiledb (POSIX)"

  - script: |
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
      echo ON
      git clone $(LIBTILEDB_REPO) $(TILEDB_SRC)
      git -C $(TILEDB_SRC) checkout $(LIBTILEDB_SHA)

      mkdir $(TILEDB_INSTALL)
      cd $(TILEDB_BUILD)
      :: use cmake directly because the powershell arg/quoting rules are bonkers

      cmake -A X64 -DCMAKE_BUILD_TYPE=Release -DTILEDB_WERROR=ON -DTILEDB_S3=ON -DTILEDB_SERIALIZATION=ON -DTILEDB_TOOLS=OFF -DTILEDB_SUPERBUILD=ON -DTILEDB_FORCE_ALL_DEPS=ON -DTILEDB_CPP_API=ON -DTILEDB_TESTS=OFF -DTILEDB_HDFS=OFF -DTILEDB_LOG_OUTPUT_ON_FAILURE=ON -DTILEDB_STATIC=ON -DTILEDB_VERBOSE=ON -DMSVC_MP_FLAG="/MP3" -DCMAKE_INSTALL_PREFIX=$(TILEDB_INSTALL) $(TILEDB_SRC) .

      cmake --build . --config Release -j3
      cmake --build . --target install-tiledb --config Release
    condition: and(eq(variables['Agent.OS'], 'Windows_NT'),  ne(variables.LIBTILEDB_CACHE_RESTORED, 'true'))
    displayName: "Bld libtiledb (Windows)"

  - bash: |
      set -xe
      if [[ "$AGENT_OS" == "Windows_NT" ]]; then
        7z a ${TILEDB_INSTALL}/libtiledb-${LIBTILEDB_VERSION}-${LIBTILEDB_SHA}. ${TILEDB_INSTALL}/*
      elif [[ "$AGENT_OS" == "Darwin" ]]; then
        tar -czf ${TILEDB_INSTALL}/libtiledb-${LIBTILEDB_VERSION}-${LIBTILEDB_SHA} -C ${TILEDB_INSTALL} .
      else
        tar -czf ${TILEDB_INSTALL}/libtiledb-${LIBTILEDB_VERSION}-${LIBTILEDB_SHA} -C ${TILEDB_INSTALL} lib64 include
      fi
    displayName: "Archive build"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(TILEDB_INSTALL)/libtiledb-$(LIBTILEDB_VERSION)-$(LIBTILEDB_SHA)
      artifactName: libtiledb-$(Agent.OS)

  - bash: |
      set -x
      # Print cmake version
      echo "CMake version:"
      cmake --version

      echo "--- Listing files (BUILD_REPOSITORY_LOCALPATH): ${BUILD_REPOSITORY_LOCALPATH} ---"
      ls $BUILD_REPOSITORY_LOCALPATH || true
      echo "--- Finding files (TILEDB_INSTALL): '${TILEDB_INSTALL}'---"
      find $TILEDB_INSTALL || true

      echo "--- Printing libtiledb git version ---"
      libtiledb_sha_actual=$(git -C $TILEDB_SRC show-ref -s $LIBTILEDB_VERSION)
      if [[ "$libtiledb_sha_actual" != "$(LIBTILEDB_SHA)" ]]; then
        echo "variable LIBTILEDB_SHA ('$LIBTILEDB_SHA') does not match SHA of LIBTILEDB_VERSION checkout ('$libtiledb_sha_actual')";
      fi
      echo "--- Printing libtiledb linkage ---"
      otool -L `find $LIBTILEDB_INSTALL -name *libtiledb*`
      echo "----------------------------------"
    displayName: "Print debug info"
    condition: always()
